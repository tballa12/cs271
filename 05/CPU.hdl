// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // DECODE //

    DMux(in=true,sel=instruction[15],a=Ainstruct,b=Cinstruct); 

    And16(a=instruction, b=true, out[0]=j3, out[1]=j2, out[2]=j1, out[3]=d3, out[4]=d2, out[5]=d1, out[6]=NO, out[7]=F, out[8]=NY, out[9]=ZY, out[10]=NX, out[11]=ZX, out[12]=a,out[0..14]=out);
              


    //A Register //
    And(a=Cinstruct,b=d1,out=Cd1);
    Mux16(a=ALUout, b=instruction, sel=Ainstruct, out=AregIn );
    Or(a=Ainstruct, b=Cd1, out=Aload);
    ARegister(in=AregIn, load=Aload, out=AregOut,out[0..14]=addressM);

    //D Register //

    And(a=d2, b=Cinstruct, out=Dload);
    DRegister(in=ALUout, load=Dload, out=DregOut);

   //Areg InM Mux //

    Mux16(a=AregOut, b=inM, sel=a, out=AM);

    //AlU //

    ALU(x=DregOut,y=AM,zx=ZX,nx=NX,zy=ZY,ny=NY,f=F,no=NO,out=ALUout,out=outM,zr=zr,ng=ng);

    //WriteM//

    And(a=d3,b=Cinstruct,out=writeM);

    //Jump //
    Or(a=zr,b=ng,out=neg);
    Not(in=neg,out=pos);

    And(a=j1,b=ng,out=jlt);
    And(a=j2,b=zr,out=jeq);
    And(a=j3,b=pos,out=jgt);

    Or(a=jlt, b=jeq, out=jle);
    Or(a=jle,b=jgt,out=jumping);
    And(a=jumping,b=Cinstruct,out=JMP);
    



    //PC//

    PC(in=AregOut, load=JMP, inc=true, reset=reset,out[0..14]=pc);


}
